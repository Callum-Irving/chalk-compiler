WHITESPACE = _{ " " | "\n" | "\t" | "\r" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* ~ "\n" }

// LIBRARY
Library = {
	SOI ~ Function* ~ EOI
}

// FUNCTION
// TODO: Args
Function = {
	FunctionStart ~ "(" ~ ")" ~ Returns? ~ BlockStatement
}

FunctionStart = ${
	"fn" ~ WHITESPACE+ ~ ident
}

Returns = ${
	("returns" ~ WHITESPACE+ ~ (Datatype | ident))
}

Datatype = { "int" | "float" | "string" }

// STATEMENT
Statement = !{
	BlockStatement
	| "if" ~ "(" ~ Expression ~ ")" ~ Statement
	| "while" ~ "(" ~ Expression ~ ")" ~ Statement
	| "return" ~ Expression ~ ";"
	| Datatype ~ ident ~ "=" ~ Expression ~ ";"
	| Expression ~ ";"
	| ";"
}

BlockStatement = !{
	"{" ~ Statement* ~ "}"
}

// EXPRESSION
Expression = { AssignExpression }

AssignExpression = {
    AddExpression ~ (AssignOp ~ AddExpression)?
}

AssignOp = {
    ">>>="
    | "^^=" | ">>=" | "<<="
    | "~=" | "+=" | "-=" | "*=" | "^=" | "|=" | "&=" | "/="
    | "="
}

AddExpression = {
    MulExpression ~ (("+" | "-") ~ MulExpression)?
}

MulExpression = {
    UnaryExpression ~ (("*" | "/" | "%") ~ UnaryExpression)?
}

UnaryExpression = {
    UnaryOp ~ UnaryExpression
    | PrimaryExpr
}

UnaryOp = {
	"&"
	| "*"
	| "-"
	| "!"
}

PrimaryExpr = {
    "true"
    | "false"
    | float
    | int
    | ident
    | char
    | string
}

int = @{ ASCII_DIGIT+ }
float = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
ident = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
char = @{ "\'" ~ ( (!("\'" | "\\") ~ ANY) | ("\\" ~ predefined) ) ~ "\'" }
string = { "\"" ~ ( (!("\"" | "\\") ~ ANY) | ("\\" ~ predefined) )* ~ "\"" }
predefined = _{ "n" | "r" | "t" | "\\" | "0" | "\"" | "'" }
